cmake_minimum_required(VERSION 2.4)

project(CE3D2)

set(CE3D2_VERSION_MAJOR 2)
set(CE3D2_VERSION_MINOR 2)
set(CE3D2_VERSION_MICRO dev)
set(CE3D2_VERSION
    ${CE3D2_VERSION_MAJOR}.${CE3D2_VERSION_MINOR}.${CE3D2_VERSION_MICRO})
set(PROJECT_VERSION_MAJOR ${CE3D2_VERSION_MAJOR})
set(PROJECT_VERSION_MINOR ${CE3D2_VERSION_MINOR})
set(PROJECT_VERSION_MICRO ${CE3D2_VERSION_MICRO})
set(PROJECT_VERSION ${CE3D2_VERSION})

set(CMAKE_CXX_FLAGS "-std=c++11 -Wall")
if(CMAKE_BUILD_ARCHITECTURE)
    if(CMAKE_BUILD_ARCHITECTURE MATCHES "x(86|64)")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m${CMAKE_MATCH_1}")
        message(STATUS "${CMAKE_CXX_FLAGS}")
    else()
        message(FATAL_ERROR "Invalid build architecture: ${CMAKE_BUILD_ARCHITECTURE}")
    endif()
endif()
message(FATAL_ERROR "STOP")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
   CMAKE_BUILD_TYPE STREQUAL "Release")

    add_subdirectory("CE3D2")

    if(TESTS_ENABLED)
        add_subdirectory("tests")
    endif()

elseif(CMAKE_BUILD_TYPE STREQUAL "Documentation")
    add_subdirectory("docs")
endif()
